// ========================================
// THU·∫¨T TO√ÅN MINIMAX - AI CHO TIC-TAC-TOE
// ========================================

import { calculateWinner, getAvailableMoves } from './gameLogic';

/**
 * Thu·∫≠t to√°n Minimax - T√¨m n∆∞·ªõc ƒëi t·ªëi ∆∞u cho Bot
 * @param {Array} squares - M·∫£ng 9 √¥ hi·ªán t·∫°i
 * @param {boolean} isMaximizing - true = Bot ƒëang t√¨m n∆∞·ªõc t·ªët nh·∫•t, false = ƒë·ªëi th·ªß
 * @param {string} botSymbol - K√Ω hi·ªáu c·ªßa Bot ('X' ho·∫∑c 'O')
 * @param {string} humanSymbol - K√Ω hi·ªáu c·ªßa ng∆∞·ªùi ch∆°i
 * @returns {number} - ƒêi·ªÉm s·ªë c·ªßa tr·∫°ng th√°i b√†n c·ªù
 */
function minimax(squares, isMaximizing, botSymbol, humanSymbol) {
  // ƒêI·ªÄU KI·ªÜN D·ª™NG: Ki·ªÉm tra k·∫øt th√∫c game
  const winner = calculateWinner(squares);
  
  // Bot th·∫Øng ‚Üí Tr·∫£ v·ªÅ ƒëi·ªÉm cao (+10)
  if (winner === botSymbol) {
    return 10;
  }
  
  // Ng∆∞·ªùi ch∆°i th·∫Øng ‚Üí Tr·∫£ v·ªÅ ƒëi·ªÉm th·∫•p (-10)
  if (winner === humanSymbol) {
    return -10;
  }
  
  // H√≤a (h·∫øt √¥) ‚Üí Tr·∫£ v·ªÅ 0
  const availableMoves = getAvailableMoves(squares);
  if (availableMoves.length === 0) {
    return 0;
  }

  // ===== PH·∫¶N ƒê·ªÜ QUY =====
  
  if (isMaximizing) {
    // L∆∞·ª£t Bot: T√¨m ƒëi·ªÉm cao nh·∫•t
    let bestScore = -Infinity;
    
    for (let i = 0; i < availableMoves.length; i++) {
      const move = availableMoves[i];
      
      // T·∫†O B·∫¢N SAO m·ªõi ƒë·ªÉ tr√°nh mutate
      const newSquares = squares.slice();
      newSquares[move] = botSymbol;
      
      // G·ªçi ƒë·ªá quy cho l∆∞·ª£t ƒë·ªëi th·ªß
      const score = minimax(newSquares, false, botSymbol, humanSymbol);
      
      // L·∫•y ƒëi·ªÉm cao nh·∫•t
      bestScore = Math.max(score, bestScore);
    }
    
    return bestScore;
    
  } else {
    // L∆∞·ª£t ng∆∞·ªùi ch∆°i: T√¨m ƒëi·ªÉm th·∫•p nh·∫•t
    let bestScore = Infinity;
    
    for (let i = 0; i < availableMoves.length; i++) {
      const move = availableMoves[i];
      
      // T·∫†O B·∫¢N SAO m·ªõi ƒë·ªÉ tr√°nh mutate
      const newSquares = squares.slice();
      newSquares[move] = humanSymbol;
      
      // G·ªçi ƒë·ªá quy cho l∆∞·ª£t Bot
      const score = minimax(newSquares, true, botSymbol, humanSymbol);
      
      // L·∫•y ƒëi·ªÉm th·∫•p nh·∫•t
      bestScore = Math.min(score, bestScore);
    }
    
    return bestScore;
  }
}

/**
 * T√¨m n∆∞·ªõc ƒëi t·ªët nh·∫•t cho Bot
 * @param {Array} squares - M·∫£ng 9 √¥ hi·ªán t·∫°i
 * @param {string} botSymbol - K√Ω hi·ªáu c·ªßa Bot
 * @param {string} humanSymbol - K√Ω hi·ªáu c·ªßa ng∆∞·ªùi ch∆°i
 * @returns {number} - Index c·ªßa √¥ t·ªët nh·∫•t (0-8)
 */
export function getBestMove(squares, botSymbol, humanSymbol) {
  console.log('ü§ñ Bot b·∫Øt ƒë·∫ßu t√≠nh to√°n...');
  const startTime = Date.now();
  
  let bestScore = -Infinity;
  let bestMove = null;
  
  const availableMoves = getAvailableMoves(squares);
  console.log('üìã S·ªë n∆∞·ªõc ƒëi kh·∫£ d·ª•ng:', availableMoves.length);
  
  // T·ªëi ∆∞u: N·∫øu b√†n c·ªù tr·ªëng, ch·ªçn √¥ gi·ªØa
  if (availableMoves.length === 9) {
    console.log('‚úÖ B√†n c·ªù tr·ªëng, ch·ªçn √¥ gi·ªØa (4)');
    return 4;
  }
  
  // Duy·ªát qua t·∫•t c·∫£ n∆∞·ªõc ƒëi c√≥ th·ªÉ
  for (let i = 0; i < availableMoves.length; i++) {
    const move = availableMoves[i];
    
    // T·∫†O B·∫¢N SAO ƒë·ªÉ tr√°nh mutate
    const newSquares = squares.slice();
    newSquares[move] = botSymbol;
    
    // T√≠nh ƒëi·ªÉm c·ªßa n∆∞·ªõc ƒëi n√†y
    const score = minimax(newSquares, false, botSymbol, humanSymbol);
    
    console.log(`  √î ${move}: ƒëi·ªÉm = ${score}`);
    
    // C·∫≠p nh·∫≠t n∆∞·ªõc ƒëi t·ªët nh·∫•t
    if (score > bestScore) {
      bestScore = score;
      bestMove = move;
    }
  }
  
  const endTime = Date.now();
  console.log(`‚úÖ Bot ch·ªçn √¥ ${bestMove} (ƒëi·ªÉm: ${bestScore}) - Th·ªùi gian: ${endTime - startTime}ms`);
  
  return bestMove;
}
